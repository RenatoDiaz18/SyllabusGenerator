package Paneles;

import Clases.Desempeño;
import Clases.Silabo;
import java.util.List;
import javax.swing.JOptionPane;
import prototipo.JFGenerador;
import prototipo.modelos.table.FilaSistemaEvaluacion;
import prototipo.modelos.table.SistemasEvaluacionTableModel;

public class JPSistemaCalificacion extends javax.swing.JPanel {

    private int filaSeleccionada = -1;

    private List<Desempeño> desempeños;
    private Silabo silabo;
    private JFGenerador padre;
    private JPFinal frm;

    List<FilaSistemaEvaluacion> filas;
    private SistemasEvaluacionTableModel modeloCali;

    public JPSistemaCalificacion(List<Desempeño> desempeño, JFGenerador padre, Silabo silabo) {
        this.desempeños = desempeño;
        this.silabo = silabo;
        this.padre = padre;

        initComponents();
        setControlesActivos(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSistemaCalificacion = new javax.swing.JTable();
        txtPromedio = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblSistemaCalificacion = new javax.swing.JLabel();
        lblEvidenciasAprendizaje = new javax.swing.JLabel();
        lblSiglas = new javax.swing.JLabel();
        lblPeso = new javax.swing.JLabel();
        txtEvidenciasAprendizaje = new javax.swing.JTextField();
        txtSiglas = new javax.swing.JTextField();
        spPeso = new javax.swing.JSpinner();
        lblCronograma = new javax.swing.JLabel();
        txtCronograma = new javax.swing.JTextField();
        lblPromedio = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSiguiento = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblSistemaCalificacion.setBackground(new java.awt.Color(204, 204, 204));
        tblSistemaCalificacion.setForeground(new java.awt.Color(0, 0, 0));
        tblSistemaCalificacion.setModel(this.modeloCali);
        jScrollPane1.setViewportView(tblSistemaCalificacion);

        txtPromedio.setEditable(false);
        txtPromedio.setBackground(new java.awt.Color(204, 204, 204));
        txtPromedio.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblSistemaCalificacion.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblSistemaCalificacion.setForeground(new java.awt.Color(0, 102, 204));
        lblSistemaCalificacion.setText("•    Sistema de calificación    ");

        lblEvidenciasAprendizaje.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblEvidenciasAprendizaje.setForeground(new java.awt.Color(0, 0, 0));
        lblEvidenciasAprendizaje.setText("Evidencias de aprendizaje");

        lblSiglas.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblSiglas.setForeground(new java.awt.Color(0, 0, 0));
        lblSiglas.setText("Siglas");

        lblPeso.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblPeso.setForeground(new java.awt.Color(0, 0, 0));
        lblPeso.setText("Peso");

        txtEvidenciasAprendizaje.setBackground(new java.awt.Color(204, 204, 204));
        txtEvidenciasAprendizaje.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        txtEvidenciasAprendizaje.setForeground(new java.awt.Color(0, 0, 0));
        txtEvidenciasAprendizaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEvidenciasAprendizajeKeyReleased(evt);
            }
        });

        txtSiglas.setEditable(false);
        txtSiglas.setBackground(new java.awt.Color(204, 204, 204));
        txtSiglas.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        txtSiglas.setForeground(new java.awt.Color(0, 0, 0));

        spPeso.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.1f), Float.valueOf(0.1f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        spPeso.setEditor(new javax.swing.JSpinner.NumberEditor(spPeso, "0%"));

        lblCronograma.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblCronograma.setForeground(new java.awt.Color(0, 0, 0));
        lblCronograma.setText("Cronograma");

        txtCronograma.setBackground(new java.awt.Color(204, 204, 204));
        txtCronograma.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        txtCronograma.setForeground(new java.awt.Color(0, 0, 0));

        lblPromedio.setFont(new java.awt.Font("SF UI  Text Med", 0, 12)); // NOI18N
        lblPromedio.setForeground(new java.awt.Color(0, 0, 0));
        lblPromedio.setText("Pomedio:");

        btnAgregar.setBackground(new java.awt.Color(0, 102, 204));
        btnAgregar.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(0, 102, 204));
        btnModificar.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(0, 102, 204));
        btnCancelar.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setBackground(new java.awt.Color(0, 102, 204));
        btnAceptar.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 102, 204));
        btnEliminar.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSiguiento.setBackground(new java.awt.Color(0, 102, 255));
        btnSiguiento.setFont(new java.awt.Font("SF UI  Text Med", 1, 14)); // NOI18N
        btnSiguiento.setText("Siguiente");
        btnSiguiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguientoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSistemaCalificacion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPromedio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPromedio)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnAgregar)
                                .addGap(38, 38, 38)
                                .addComponent(btnModificar)
                                .addGap(39, 39, 39)
                                .addComponent(btnEliminar)
                                .addGap(31, 31, 31)))))
                .addGap(35, 35, 35)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEvidenciasAprendizaje)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnAceptar)
                            .addGap(29, 29, 29)
                            .addComponent(btnCancelar))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEvidenciasAprendizaje)
                            .addComponent(lblSiglas)
                            .addComponent(txtCronograma)
                            .addComponent(txtSiglas)
                            .addComponent(spPeso)
                            .addComponent(lblPeso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCronograma, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(58, 58, 58))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSiguiento)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblSistemaCalificacion)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblEvidenciasAprendizaje)
                        .addGap(5, 5, 5)
                        .addComponent(txtEvidenciasAprendizaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSiglas)
                        .addGap(1, 1, 1)
                        .addComponent(txtSiglas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPeso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCronograma)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCronograma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAceptar)
                            .addComponent(btnCancelar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPromedio, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPromedio))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(btnSiguiento)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiarCampos();
        setControlesActivos(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        setControlesActivos(true);
        limpiarCampos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        if (txtEvidenciasAprendizaje.getText().trim().isEmpty() || txtSiglas.getText().trim().isEmpty() || txtCronograma.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe llenar todos los campos.");
            return;
        }

        double pesoIngresado = Double.parseDouble(spPeso.getValue().toString());
        double sumaPesos = 0;

        for (int i = 0; i < modeloCali.getRowCount(); i++) {
            if (i != filaSeleccionada) {
                sumaPesos += modeloCali.getFila(i).getPeso();
            }
        }

        if (sumaPesos + pesoIngresado > 1.0) {
            JOptionPane.showMessageDialog(this, "La suma de los pesos excede el 100%");
            return;
        }
        FilaSistemaEvaluacion fila = new FilaSistemaEvaluacion(
                txtEvidenciasAprendizaje.getText().trim(),
                txtSiglas.getText().trim(),
                pesoIngresado,
                txtCronograma.getText().trim()
        );

        if (filaSeleccionada == -1) {
            modeloCali.agregarFila(fila);
        } else {
            modeloCali.setFila(filaSeleccionada, fila);
            filaSeleccionada = -1;
        }

        actualizarPromedio();
        limpiarCampos();
        setControlesActivos(false);
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void txtEvidenciasAprendizajeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEvidenciasAprendizajeKeyReleased
        String texto = txtEvidenciasAprendizaje.getText().trim();

        if (!texto.isEmpty()) {
            String[] palabras = texto.split("\\s+");
            StringBuilder baseSigla = new StringBuilder();

            // Generar la sigla base (sin números)
            for (String palabra : palabras) {
                if (!palabra.isEmpty()) {
                    baseSigla.append(Character.toUpperCase(palabra.charAt(0)));
                }
            }

            String siglaFinal = baseSigla.toString();
            int contador = 1;

            // Verificar si ya existe en la tabla, si sí, añadirle número incremental
            while (existeSiglaEnTabla(siglaFinal)) {
                siglaFinal = baseSigla.toString() + contador;
                contador++;
            }

            txtSiglas.setText(siglaFinal);
        } else {
            txtSiglas.setText("");
        }

    }//GEN-LAST:event_txtEvidenciasAprendizajeKeyReleased

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = tblSistemaCalificacion.getSelectedRow();
        if (fila != -1) {
            modeloCali.eliminarFila(fila);
            actualizarPromedio();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar.");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        filaSeleccionada = tblSistemaCalificacion.getSelectedRow();
        if (filaSeleccionada != -1) {
            FilaSistemaEvaluacion fila = modeloCali.getFila(filaSeleccionada);
            txtEvidenciasAprendizaje.setText(fila.getEvidencia());
            txtSiglas.setText(fila.getSigla());
            spPeso.setValue(fila.getPeso());
            txtCronograma.setText(fila.getCronograma());
            setControlesActivos(true);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para modificar.");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnSiguientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguientoActionPerformed
        // Obtener el modelo de la tabla
        modeloCali = (SistemasEvaluacionTableModel) tblSistemaCalificacion.getModel();
        filas = modeloCali.getFilas();

        // Validar que haya al menos una fila
        if (filas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar al menos una evidencia.");
            return;
        }

        // Validar que la suma de los pesos sea 100
        double totalPeso = 0;
        for (FilaSistemaEvaluacion fila : filas) {
            totalPeso += fila.getPeso();
        }

        if (totalPeso != 100.0) {
            JOptionPane.showMessageDialog(this, "La suma de los pesos debe ser exactamente 100%. Actualmente es: " + totalPeso);
            return;
        }

        // Obtener el texto del promedio
        String resultado = txtPromedio.getText().trim();

        if (resultado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar el promedio mínimo para aprobar.");
            return;
        }

        // Guardar los datos en el objeto Silabo
        silabo.setSistemaEvaluacion(filas);
        silabo.setPromedioSistemaEvaluacion(resultado);

        // Avanzar al siguiente panel (si existe una lógica para ello)
        if (padre != null) {
            padre.cambiarPanel(frm);
        }
    }//GEN-LAST:event_btnSiguientoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSiguiento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCronograma;
    private javax.swing.JLabel lblEvidenciasAprendizaje;
    private javax.swing.JLabel lblPeso;
    private javax.swing.JLabel lblPromedio;
    private javax.swing.JLabel lblSiglas;
    private javax.swing.JLabel lblSistemaCalificacion;
    private javax.swing.JSpinner spPeso;
    private javax.swing.JTable tblSistemaCalificacion;
    private javax.swing.JTextField txtCronograma;
    private javax.swing.JTextField txtEvidenciasAprendizaje;
    private javax.swing.JTextField txtPromedio;
    private javax.swing.JTextField txtSiglas;
    // End of variables declaration//GEN-END:variables

    private void setControlesActivos(boolean activo) {
        txtEvidenciasAprendizaje.setEnabled(activo);
        txtSiglas.setEnabled(activo);
        spPeso.setEnabled(activo);
        txtCronograma.setEnabled(activo);
        btnAceptar.setEnabled(activo);
        btnCancelar.setEnabled(activo);
    }

    private void limpiarCampos() {
        txtEvidenciasAprendizaje.setText("");
        txtSiglas.setText("");
        txtCronograma.setText("");
        spPeso.setValue(0.1f);
    }

    private void actualizarPromedio() {
        StringBuilder resultado = new StringBuilder();
        for (int i = 0; i < modeloCali.getRowCount(); i++) {
            String sigla = modeloCali.getValueAt(i, 1).toString();
            String pesoStr = modeloCali.getValueAt(i, 2).toString().replace("%", "");
            double peso = Double.parseDouble(pesoStr);
            resultado.append((int) peso).append("% ").append(".").append(sigla).append("  +");

        }
        txtPromedio.setText(resultado.toString().trim().substring(0, resultado.length() - 1));

    }

    private boolean existeSiglaEnTabla(String sigla) {
        for (int i = 0; i < modeloCali.getRowCount(); i++) {
            String existente = modeloCali.getFila(i).getSigla();
            if (existente.equalsIgnoreCase(sigla)) {
                return true;
            }
        }
        return false;
    }

}
